{"version":3,"sources":["images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","API.js","helpers.js","hooks/useHomeFetch.js","images/no_image.jpg","components/Home.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","TMDBLogo","API_URL","API_KEY","process","REACT_APP_API_KEY","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","image","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","movieId","clickable","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","value","button","Button","callback","onClick","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","API","movies","prev","console","log","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","BreadCrumb","movieTitle","backdrop","MovieInfo","className","vote_average","directors","length","director","name","credit_id","MovieInfoBar","budget","revenue","Actor","character","imageUrl","Movie","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bbeb1a24.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/react-movie-logo.42955eb6.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  max-width: var(--maxWidth);\n  padding: 20px 0;\n  margin: 0 auto;\n`;\n\nexport const LogoImg = styled.img`\n  width: 200px;\n\n  @media screen and (max-width: 500px) {\n    width: 150px;\n  }\n`;\n\nexport const TMDBLogoImg = styled.img`\n  width: 100px;\n\n  @media screen and (max-width: 500px) {\n    width: 80px;\n  }\n`;\n","import React from 'react';\nimport {Link} from 'react-router-dom';\nimport RMDBLogo from '../../images/react-movie-logo.svg';\nimport TMDBLogo from '../../images/tmdb_logo.svg';\n\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from './Header.styles';\n\nconst Header = () => (\n  <Wrapper>\n    <Content>\n      <Link to='/'>\n        <LogoImg src={RMDBLogo} alt='rmdb-logo' />\n      </Link>\n      \n      <TMDBLogoImg src={TMDBLogo} alt='tmdb-logo' />\n    </Content>\n  </Wrapper>\n);\n\nexport default Header;\n","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  background: linear-gradient(\n      to bottom,\n      rgba(0, 0, 0, 0) 41%,\n      rgba(0, 0, 0, 0.65) 100%\n    ),\n    url(${({ image }) => image}), var(--darkGrey);\n  background-size: 100%, cover;\n  background-position: center;\n  height: 600px;\n  position: relative;\n  animation: animateHeroImage 1s;\n\n  @keyframes animateHeroImage {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  padding: 20px;\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n`;\n\nexport const Text = styled.div`\n  z-index: 100;\n  max-width: 700px;\n  position: absolute;\n  bottom: 40px;\n  margin-right: 20px;\n  min-height: 100px;\n  color: var(--white);\n\n  h1 {\n    font-size: var(--fontSuperBig);\n\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontBig);\n    }\n  }\n\n  p {\n    font-size: var(--fontMed);\n\n    @media screen and (max-width: 720px) {\n      font-size: var(--fontSmall);\n    }\n  }\n\n  @media screen and (max-width: 720px) {\n    max-width: 100%;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// Styles\nimport { Wrapper, Content, Text } from './HeroImage.styles';\n\nconst HeroImage = ({ image, title, text }) => (\n  <Wrapper image={image}>\n    <Content>\n      <Text>\n        <h1>{title}</h1>\n        <p>{text}</p>\n      </Text>\n    </Content>\n  </Wrapper>\n);\n\nHeroImage.propTypes ={\n  image: PropTypes.string,\n  title: PropTypes.string,\n  text: PropTypes.string\n};\nexport default HeroImage;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  max-width: var(--maxWidth);\n  margin: 0 auto;\n  padding: 0 20px;\n\n  h1 {\n    color: var(--medGrey);\n\n    @media screen and (max-width: 768px) {\n      font-size: var(--fontBig);\n    }\n  }\n`;\n\nexport const Content = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  grid-gap: 2rem;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n// Styles\nimport { Wrapper, Content } from './Grid.styles';\n\nconst Grid = ({ header, children }) => (\n  <Wrapper>\n    <h1>{header}</h1>\n    <Content>{children}</Content>\n  </Wrapper>\n);\nGrid.propTypes =  {\n  header:PropTypes.string\n};\n\n\nexport default Grid;\n","import styled from 'styled-components';\n\nexport const Image = styled.img`\n  width: 100%;\n  max-width: 720px;\n  transition: all 0.3s;\n  object-fit: cover;\n  border-radius: 20px;\n  animation: animateThumb 0.5s;\n\n  :hover {\n    opacity: 0.8;\n  }\n\n  @keyframes animateThumb {\n    from {\n      opacity: 0;\n    }\n    to {\n      opacity: 1;\n    }\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\n// Styles\nimport { Image } from './Thumb.styles';\n\nconst Thumb = ({ image, movieId, clickable }) => (\n  <div>\n    {clickable ? (\n      <Link to={`/${movieId}`}>\n        <Image src={image} alt='movie-thumb' />\n      </Link>\n    ):(\n      <Image src={image} alt='movie-thumb' />\n    )}\n    \n  </div>\n);\n\nThumb.propTypes = {\n  image: PropTypes.string,\n  movieId: PropTypes.number,\n  clickable:PropTypes.bool\n};\nexport default Thumb;\n","import { Spinner } from './Spinner.styles';\n\nexport default Spinner;\n","import styled from 'styled-components';\n\nexport const Spinner = styled.div`\n  border: 5px solid var(--lightGrey);\n  border-top: 5px solid var(--medGrey);\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 0.8s linear infinite;\n  margin: 20px auto;\n\n  @keyframes spin {\n    0% {\n      transform: rotate(0deg);\n    }\n    100% {\n      transform: rotate(360deg);\n    }\n  }\n`;\n","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  height: 100px;\n  background: var(--darkGrey);\n  padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n  position: relative;\n  max-width: var(--maxWidth);\n  width: 100%;\n  height: 55px;\n  background: var(--medGrey);\n  margin: 0 auto;\n  border-radius: 40px;\n  color: var(--white);\n\n  img {\n    position: absolute;\n    left: 15px;\n    top: 14px;\n    width: 30px;\n  }\n\n  input {\n    font-size: var(--fontBig);\n    position: absolute;\n    left: 0;\n    margin: 8px 0;\n    padding: 0 0 0 60px;\n    border: 0;\n    width: 95%;\n    background: transparent;\n    height: 40px;\n    color: var(--white);\n\n    :focus {\n      outline: none;\n    }\n  }\n`;\n","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\n// Image\nimport searchIcon from '../../images/search-icon.svg';\n// Styles\nimport { Wrapper, Content } from './SearchBar.styles';\n\nconst SearchBar = ({ setSearchTerm }) => {\n  const [state, setState] = useState('');\n  const initial = useRef(true);\n\n  useEffect(() => {\n    if (initial.current) {\n      initial.current = false;\n      return;\n    }\n\n    const timer = setTimeout(() => {\n      setSearchTerm(state);\n    }, 500)\n\n    return () => clearTimeout(timer)\n  },[setSearchTerm, state])\n\n  return (\n    <Wrapper>\n      <Content>\n        <img src={searchIcon} alt='search-icon' />\n        <input\n          type='text'\n          placeholder='Search Movie'\n          onChange={event => setState(event.currentTarget.value)}\n          value={state}\n        />\n      </Content>\n    </Wrapper>\n  );\n};\nSearchBar.propTypes = {\n  callback: PropTypes.func\n}\n\nexport default SearchBar;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.button`\n  display: block;\n  background: var(--darkGrey);\n  width: 25%;\n  min-width: 200px;\n  height: 60px;\n  border-radius: 30px;\n  color: var(--white);\n  border: 0;\n  font-size: var(--fontBig);\n  margin: 20px auto;\n  transition: all 0.3s;\n  outline: none;\n  cursor: pointer;\n\n  :hover {\n    opacity: 0.8;\n  }\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Styles\nimport { Wrapper } from './Button.styles';\n\nconst Button = ({ text, callback }) => (\n  <Wrapper type='button' onClick={callback}>\n    {text}\n  </Wrapper>\n);\nButton.propTypes = {\n  text: PropTypes.string,\n  callback : PropTypes.func\n}\nexport default Button;","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData)\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken })\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value })\n      })\n    ).json();\n\n    return rating;\n  }\n};\n\nexport default apiSettings;\n","// Convert time to hours and minutes\nexport const calcTime = time => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n};\n// Convert a number to money formatting\nexport const convertMoney = money => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n};\n\nexport const isPersistedState = stateName => {\n  const sessionState = sessionStorage.getItem(stateName);\n  return sessionState && JSON.parse(sessionState);\n}","import { useState, useEffect, useRef } from 'react';\r\n// API\r\nimport API from '../API';\r\n//Helpers\r\nimport { isPersistedState } from '../helpers';\r\nconst initialState = {\r\n  page: 0,\r\n  results: [],\r\n  total_pages: 0,\r\n  total_results: 0\r\n};\r\n\r\nexport const useHomeFetch = () => {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [state, setState] = useState(initialState);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\r\n\r\n  const fetchMovies = async (page, searchTerm = '') => {\r\n    try {\r\n      setError(false);\r\n      setLoading(true);\r\n\r\n      const movies = await API.fetchMovies(searchTerm, page);\r\n\r\n      setState(prev => ({\r\n        ...movies,\r\n        results:\r\n          page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\r\n      }));\r\n    } catch (error) {\r\n      setError(true);\r\n    }\r\n    setLoading(false);\r\n  };\r\n\r\n   // Search and initial\r\n  useEffect(() => {\r\n    if(!searchTerm){ \r\n      const sessionState = isPersistedState('homeState');\r\n\r\n      if(sessionState){\r\n        console.log('Grabbing from sessionStorage');\r\n        setState(sessionState);\r\n        return;\r\n      }\r\n    }\r\n    console.log('Grabbing from API');\r\n    setState(initialState);\r\n    fetchMovies(1, searchTerm);\r\n  }, [searchTerm]);\r\n\r\n  // Load More\r\n  useEffect(() => {\r\n    if (!isLoadingMore) return;\r\n    \r\n    fetchMovies(state.page + 1, searchTerm);\r\n    setIsLoadingMore(false);\r\n  }, [isLoadingMore, searchTerm, state.page]);\r\n\r\n  //Write to sessionStorage\r\n  useEffect(()=> {\r\n    if(!searchTerm) sessionStorage.setItem('homeState',JSON.stringify(state));\r\n  },[searchTerm,state]);\r\n\r\n  return { state, loading, error, searchTerm, setSearchTerm, setIsLoadingMore };\r\n};\r\n    ","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","import React from 'react';\n// Config\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../config';\n// Components\nimport HeroImage from './HeroImage';\nimport Grid from './Grid';\nimport Thumb from './Thumb';\nimport Spinner from './Spinner';\nimport SearchBar from './SearchBar';\nimport Button from './Button';\n\n// Hook\nimport { useHomeFetch } from '../hooks/useHomeFetch';\n// Image\nimport NoImage from '../images/no_image.jpg';\n\nconst Home = () => {\n  const {\n    state,\n    loading,\n    error,\n    searchTerm,\n    setSearchTerm,\n    setIsLoadingMore\n  } = useHomeFetch();\n\n  console.log(state);\n\n  if (error) return <div>Something went wrong ...</div>;\n\n  return (\n    <>\n      {!searchTerm && state.results[0] ? (\n        <HeroImage\n          image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\n          title={state.results[0].original_title}\n          text={state.results[0].overview}\n        />\n      ) : null}\n      <SearchBar setSearchTerm={setSearchTerm} />\n      <Grid header={searchTerm ? 'Search Result' : 'Popular Movies'}>\n        {state.results.map(movie => (\n          <Thumb\n            key={movie.id}\n            clickable\n            image={\n              movie.poster_path\n                ? IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\n                : NoImage\n            }\n            movieId={movie.id}\n          />\n        ))}\n      </Grid>\n      {loading && <Spinner />}\n      {state.page < state.total_pages && !loading && (\n        <Button text='Load More' callback={() => setIsLoadingMore(true)} />\n      )}\n    </>\n  );\n};\n\nexport default Home;\n","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 70px;\r\n  background: var(--medGrey);\r\n  color: var(--white);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  max-width: var(--maxWidth);\r\n  padding: 0 20px;\r\n\r\n  span {\r\n    font-size: 1.2rem;\r\n    color: var(--white);\r\n    padding-right: 10px;\r\n\r\n    @media screen and (max-width: 768px) {\r\n      font-size: 16px;\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport {Link} from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\n//Styles\r\nimport{Wrapper,Content} from './BreadCrumb.styles';\r\n\r\nconst BreadCrumb = ({movieTitle}) => (\r\n    <Wrapper>\r\n        <Content>\r\n            <Link to='/'>\r\n                <span>Home</span>\r\n            </Link>\r\n            <span>|</span>\r\n            <span>{movieTitle}</span>\r\n\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nBreadCrumb.propTypes = {\r\n    text: PropTypes.string,\r\n    callback : PropTypes.func\r\n}\r\nexport default BreadCrumb;","import styled from 'styled-components';\r\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\r\n\r\nexport const Wrapper = styled.div`\r\n  background: ${({ backdrop }) =>\r\n    backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})` : '#000'};\r\n  background-size: cover;\r\n  background-position: center;\r\n  padding: 40px 20px;\r\n  animation: animateMovieInfo 1s;\r\n\r\n  @keyframes {\r\n    from {\r\n      opacity: 0;\r\n    }\r\n    to {\r\n      opacity: 1;\r\n    }\r\n  }\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  display: flex;\r\n  max-width: var(--maxWidth);\r\n  margin: 0 auto;\r\n  background: rgba(0, 0, 0, 0.7);\r\n  border-radius: 20px;\r\n\r\n  @media screen and (max-width: 768px) {\r\n    display: block;\r\n    max-height: none;\r\n  }\r\n`;\r\n\r\nexport const Text = styled.div`\r\n  width: 100%;\r\n  padding: 20px 40px;\r\n  color: var(--white);\r\n  overflow: hidden;\r\n\r\n  .rating-directors {\r\n    display: flex;\r\n    justify-content: flex-start;\r\n  }\r\n\r\n  .score {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 35px;\r\n    height: 35px;\r\n    background: #fff;\r\n    color: #000;\r\n    font-weight: 800;\r\n    border-radius: 50%;\r\n    margin: 0;\r\n  }\r\n\r\n  .director {\r\n    margin: 0 0 0 40px;\r\n\r\n    p {\r\n      margin: 0;\r\n    }\r\n  }\r\n\r\n  h1 {\r\n    @media screen and (max-width: 768px) {\r\n      font-size: var(--fontBig);\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport PropTypes from 'prop-types';\r\n//Components\r\nimport Thumb from '../Thumb';\r\n//Config\r\nimport { IMAGE_BASE_URL,POSTER_SIZE } from \"../../config\";\r\n//Image\r\nimport NoImage from '../../images/no_image.jpg';\r\n//Styles\r\nimport { Wrapper, Content, Text } from \"./MovieInfo.styles\";\r\n\r\nconst MovieInfo = ({movie}) => (\r\n    <Wrapper backdrop={movie.backdrop_path}>\r\n        <Content>\r\n            <Thumb\r\n                image={\r\n                    movie.poster_path\r\n                    ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\r\n                    : NoImage\r\n                }\r\n                clickable={false}\r\n                />\r\n                <Text>\r\n                    <h1>{movie.title}</h1>\r\n                    <h3>PLOT</h3>\r\n                    <p>{movie.overview}</p>\r\n\r\n                    <div className=\"rating-directors\">\r\n                        <div>\r\n                            <h3>RATING</h3>\r\n                            <div className=\"score\">{movie.vote_average}</div>\r\n                        </div>\r\n                        <div className=\"director\">\r\n                            <h3>DIRECTOR{ movie.directors.length > 1 ? 'S' : ''}</h3>\r\n                            {movie.directors.map(director=>(\r\n                                <p key={director.credit_id}>{director.name}</p>\r\n                            ))}\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </Text>\r\n        </Content>\r\n    </Wrapper>\r\n);\r\n\r\nMovieInfo.propTypes = {\r\n    movie: PropTypes.object\r\n}\r\n\r\n\r\nexport default MovieInfo;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n\r\n    display: flex;\r\n    align-items: center;\r\n    min-height: 100px;\r\n    background: var(--darkGrey);\r\n    padding: 0 20px;\r\n`;\r\n\r\nexport const Content = styled.div`\r\n\r\n    display: flex;\r\n    max-width: var(--maxWidth);\r\n    width: 100%;\r\n    margin: 0 auto;\r\n\r\n    .column{\r\n        display:flex;\r\n        align-items:center;\r\n        justify-content: center;\r\n        background: var(--medGrey);\r\n        border-radius: 20px;\r\n        margin: 0 20px;\r\n        flex: 1;\r\n\r\n        :first-child{\r\n            margin-left:0;\r\n        }\r\n        :last-child{\r\n            margin-right:0;\r\n        }\r\n        @media screen and (max-width:768px){\r\n            display:block;\r\n\r\n            .column{\r\n                margin: 20px 0;\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//Helpers\r\nimport {calcTime,convertMoney} from '../../helpers';\r\n//Styles\r\nimport {Wrapper, Content} from './MovieInfoBar.styles';\r\n\r\nconst MovieInfoBar = ({time, budget, revenue}) => (\r\n    <Wrapper>\r\n        <Content>\r\n            <div className=\"column\">\r\n                <p>Running time: {calcTime(time)}</p>\r\n            </div>\r\n            <div className=\"column\">\r\n                <p>Budget: {convertMoney(budget)}</p>\r\n            </div>\r\n            <div className=\"column\">\r\n                <p>Revenue: {convertMoney(revenue)}</p>\r\n            </div>\r\n        </Content>\r\n    </Wrapper>\r\n)\r\nMovieInfoBar.propTypes = {\r\n    time: PropTypes.number,\r\n    budget: PropTypes.number,\r\n    revenue: PropTypes.number,\r\n};\r\nexport default MovieInfoBar;","import styled from 'styled-components';\r\n\r\nexport const Wrapper = styled.div`\r\n  color: var(--white);\r\n  background: var(--darkGrey);\r\n  border-radius: 20px;\r\n  padding: 5px;\r\n  text-align: center;\r\n\r\n  h3 {\r\n    margin: 10px 0 0 0;\r\n  }\r\n\r\n  p {\r\n    margin: 5px 0;\r\n  }\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  display: block;\r\n  width: 100%;\r\n  height: 200px;\r\n  object-fit: cover;\r\n  border-radius: 15px;\r\n`;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n//Styles\r\nimport{Wrapper,Image} from './Actor.styles';\r\n\r\nconst Actor = ({name,character, imageUrl}) => (\r\n    <Wrapper>\r\n        <Image src={imageUrl}/>\r\n        <h3>{name}</h3>\r\n        <p>{character}</p>\r\n    </Wrapper>\r\n);\r\n\r\nActor.propTypes = {\r\n    name: PropTypes.string,\r\n    character: PropTypes.string,\r\n    imageUrl: PropTypes.string,\r\n}\r\n\r\nexport default Actor;","import React from 'react';\r\nimport { useParams } from 'react-router';\r\n// config\r\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config';\r\n//Components\r\nimport Grid from './Grid';\r\nimport Spinner from './Spinner';\r\nimport BreadCrumb from './BreadCrumb';\r\nimport MovieInfo from './MovieInfo';\r\nimport MovieInfoBar from './MovieInfoBar';\r\nimport Actor from './Actor';\r\n//Hook\r\nimport { useMovieFetch } from '../hooks/useMovieFetch';\r\n//Image\r\nimport NoImage from '../images/no_image.jpg';\r\n\r\nconst Movie = () => {\r\n\r\n    const {movieId} = useParams();\r\n\r\n    const { state: movie, loading, error} = useMovieFetch(movieId);\r\n\r\n    if(loading)  return <Spinner/>;\r\n    if(error) return <div>Something went wrong ...</div>;\r\n    \r\n    return (\r\n        <>\r\n        \r\n        <BreadCrumb movieTitle={movie.original_title}/>\r\n        <MovieInfo movie={movie}/>\r\n         <MovieInfoBar \r\n            time={movie.runtime} \r\n            budget={movie.budget} \r\n            revenue={movie.revenue}\r\n        />\r\n         <Grid header=\"Actors\">\r\n            {movie.actors.map(actor => (\r\n                <Actor \r\n                    key={actor.credit_id}\r\n                    name={actor.name}\r\n                    character={actor.character}\r\n                    imageUrl={\r\n                        actor.profile_path\r\n                        ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}`\r\n                        : NoImage\r\n                    }\r\n                />\r\n            ))}\r\n        </Grid> \r\n        </>\r\n    );\r\n\r\n};\r\n\r\nexport default Movie;","import { useState,useEffect } from \"react\";\r\n\r\nimport API from '../API';\r\n\r\n//Helpers\r\nimport { isPersistedState } from \"../helpers\";\r\n\r\nexport const useMovieFetch = movieId => {\r\n    const [state, setState] = useState({});\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchMovie = async() => {\r\n            try {\r\n                setLoading(true);\r\n                setError(false);\r\n\r\n                const movie = await API.fetchMovie(movieId);\r\n                const credits = await API.fetchCredits(movieId);\r\n                //Get directors only \r\n                const directors = credits.crew.filter(\r\n                    member => member.job === 'Director'\r\n                );\r\n                setState({\r\n                    ...movie,\r\n                    actors: credits.cast,\r\n                    directors\r\n                })\r\n\r\n                setLoading(false);\r\n            } catch (error){\r\n                setError(true);\r\n            }\r\n        \r\n        const sessionState = isPersistedState(movieId);\r\n\r\n        if(sessionState){\r\n            setState(sessionState);\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n\r\n\r\n        };\r\n        fetchMovie();\r\n    },[movieId]);\r\n\r\n\r\n    //Write to sessionStorage\r\n    useEffect(()=> {\r\n        sessionStorage.setItem(movieId,JSON.stringify(state));\r\n    },[movieId,state]);\r\n\r\n    return {state,loading,error};\r\n};","import React from 'react';\r\n\r\nconst NotFound = () => <div>NotFound</div>;\r\n\r\nexport default NotFound;","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyle = createGlobalStyle`\n  :root {\n    --maxWidth: 1280px;\n    --white: #fff;\n    --lightGrey: #eee;\n    --medGrey: #353535;\n    --darkGrey: #1c1c1c;\n    --fontSuperBig: 2.5rem;\n    --fontBig: 1.5rem;\n    --fontMed: 1.2rem;\n    --fontSmall: 1rem;\n  }\n\n  * {\n    box-sizing: border-box;\n    font-family: 'Abel', sans-serif;\n  }\n\n  body {\n    margin: 0;\n    padding: 0;\n    \n    h1 {\n      font-size: 2rem;\n      font-weight: 600;\n      color: var(--white);\n    }\n\n    h3 {\n      font-size: 1.1rem;\n      font-weight: 600;\n    }\n\n    p {\n      font-size: 1rem;\n      color: var(--white);\n    }\n  }\n`;\n","import React from 'react';\n//Routing \nimport {BrowserRouter as Router, Routes, Route} from 'react-router-dom';\n\n// Components\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Movie from './components/Movie';\nimport NotFound from './components/NotFound';\n\n// Styles\nimport { GlobalStyle } from './GlobalStyle';\n\nconst App = () => (\n    <Router>\n      <Header />\n      <Routes>\n        <Route path='/' element={<Home/>} />\n        <Route path='/:movieId' element={<Movie/>} />\n        <Route path='/*' element={<NotFound/>}/>\n      </Routes>\n      \n      <GlobalStyle />\n    </Router>\n  );\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}